/**
 *
 */

apply plugin: 'maven'
apply plugin: 'java'

////////////////////////////////////////////////////////////////////////////////
//
//	. Dependencies .
//

repositories {
	mavenCentral()		// repo1.maven.org
}

//
// 	. see [search.maven.org]
//
dependencies {
	 compile (group: 'commons-dbcp', 		name: 'commons-dbcp', 		version: '1.3')
	 compile (group: 'commons-fileupload', 		name: 'commons-fileupload',	version: '1.3')
	 compile (group: 'commons-io', 			name: 'commons-io', 		version: '1.3.1')
	 compile (group: 'commons-logging', 		name: 'commons-logging', 	version: '1.2')
	 compile (group: 'commons-pool', 		name: 'commons-pool', 		version: '1.3')

	 compile (group: 'jstl', 			name: 'jstl', 			version: '1.1.2')
	 compile (group: 'mysql', 			name: 'mysql-connector-java', 	version: '5.1.6')
	 compile (group: 'ognl', 			name: 'ognl', 			version: '2.6.9')

	 compile (group: 'org.springframework.webflow',	name: 'org.springframework.binding',	version: '2.0.3.RELEASE')
	 compile (group: 'org.springframework.webflow',	name: 'org.springframework.js',		version: '2.0.3.RELEASE')
	 compile (group: 'org.springframework.webflow',	name: 'org.springframework.webflow',	version: '2.0.3.RELEASE')

	 compile (group: 'org.springframework', 	name: 'spring', 		version: '2.5.5')
	 compile (group: 'org.springframework', 	name: 'spring-web', 		version: '2.5.5')
	 compile (group: 'org.springframework', 	name: 'spring-webmvc', 		version: '2.5.5')

	 compile (group: 'org.apache.taglibs', 		name: 'taglibs-standard',	version: '1.2.1')
}


////////////////////////////////////////////////////////////////////////////////
//
//	. Properties .
//

ext.buildRuntimeLibDir = "${buildDir}/output/lib"


////////////////////////////////////////////////////////////////////////////////
//
//	. Tasks .
//

defaultTasks 'mkdevEnvironment'

task copyRuntimeLibs(type: Copy) << {
	into buildRuntimeLibDir
	from configurations.runtime
}

task mkdevEnvironment.doLast() {

	dependsOn copyRuntimeLibs

	createSymlink("${projectDir}/conf/ROOT.xml", tomcatConfig)
	createSymlink("${projectDir}/conf/nginx.conf", nginxConfig)
	createSymlink("${projectDir}/src/main/webapp", webappDir)
	createSymlink("${projectDir}/resource/data", webappData)

	createSymlink("${projectDir}/src/main/webapp/jsp", "${projectDir}/src/main/webapp/WEB-INF/jsp")

	createSymlink(buildRuntimeLibDir, "${projectDir}/src/main/webapps/WEB-INF/lib")

}



////////////////////////////////////////////////////////////////////////////////
//
//	. Utility Functions .
//

def isSymlink(linkFile) {	// probably?
	def canon = new File( linkFile.getParentFile().getCanonicalFile(), linkFile.getName() )
	return !canon.getCanonicalFile().equals(canon.getAbsoluteFile())
}

def createSymlink(resource, link) {
	def srcFile = new File(resource)
	if ( !srcFile.exists() ) { 
		printf("ERROR: source file '%s' does not exist!\n", resource.getName())
		return
	}

	def dstLink = new File(link)
	if ( !dstLink.exists() ) {
		if (!dstLink.getParentFile().exists()) dstLink.getParentFile().mkdirs()
		printf("INFO: created directory '%s'.", dstLink.getParentFile())
	}
	else if ( !isSymlink(dstLink) ) {
		printf("WARN: destination link '%s' exists!\n", dstLink.getName())
		printf("WARN: attempting to backup!\n")
		if (!backupFile(dstLink)) return
	}

	ant.symlink ( resource: resource, link: link, overwrite: 'true' )
	printf("INFO: resource '%s' symlinked to '%s'\n", resource, link)
}

def backupFile(resource) {
	def dstFile = new File( resource.getParentFile(), sprintf("%s.000", resource.getName()) );
	if ( dstFile.exists() ) {
		printf("ERROR: destination link '%s' exists!", dstLink.getName())
		return false
	}
	resource.renameTo(dstFile)
	printf("INFO: resource '%s' backed up to '%s'\n", resource.getPath(), dstFile.getName())
	return true;
}


////////////////////////////////////////////////////////////////////////////////

