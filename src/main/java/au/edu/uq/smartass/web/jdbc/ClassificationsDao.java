/* This file is part of SmartAss and contains the ClassificationsDao class - the object-relational mapping class 
 * for the ClassificationsItemModel.
 * 
 * Copyright (C) 2008 The University of Queensland
 * SmartAss is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation; either version 2, or
 * (at your option) any later version.
 * GNU program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with program;
 * see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */
package au.edu.uq.smartass.web.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.jdbc.core.RowMapper;

import au.edu.uq.smartass.web.ClassificationsItemModel;

/**
 * The ClassificationsDao class - the object-relational mapping class for the {@link ClassificationsItemModel}.
 * 
 */
public class ClassificationsDao extends DictionaryDao {
	ItemRowMapper mapper;

	/**
	 * The ItemRowMapper class is the service class that maps data stored in the 
	 * relational database table(s) to {@link ClassificationsItemModel} object
	 */
	class ItemRowMapper implements RowMapper{
		public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
	    	ClassificationsItemModel item = new ClassificationsItemModel();

	    	item.setId(rs.getInt("id"));
	    	item.setName(rs.getString("name"));
	    	item.setDescription(rs.getString("description"));
	    	
	    	int parent_id = rs.getInt("parent_id");
	    	if(parent_id!=0)
	    		item.setParentModel(getItem(parent_id));
	    	
	    	return item;
		}
	}
	
	protected List<ClassificationsItemModel> select(String sql, Object[] params) {
		if(mapper==null)
			mapper = new ItemRowMapper();
		return getJdbcTemplate().query(sql, params, mapper);
	}
	
	/**
	 * Returns the single {@link ClassificationsItemModel} selected by its id
	 * 
	 * @param id	ClassificationsItemModel id
	 * 
	 * @return	the ClassificationsItemModel 
	 */
	public ClassificationsItemModel getItem(int id) {
		List<ClassificationsItemModel> items = select("select * from classifications where id=?", new Integer[]{id});
		if(items.size()>0)
			return items.get(0);
		return null;
	}
	
	/**
	 * Returns the list of {@link ClassificationsItemModel} selected by the parent id
	 * 
	 * @param parent_id		the parent id
	 * @return				the list of {@link ClassificationsItemModel}
	 */
	public List<ClassificationsItemModel> select(int parent_id) {
		return select("select * from classifications where parent_id=? order by name", new Integer[]{parent_id});
	}
	
	/**
	 * Returns the list of {@link ClassificationsItemModel} selected by the parent id and the substring
	 * from the classification name
	 * 
	 * @param parent_id		the parent id
	 * @param filter		the string to be searched in the classification name
	 * 
	 * @return				the list of {@link ClassificationsItemModel}
	 */
	public List<ClassificationsItemModel> getItems(int parent_id, String filter) {
		return select("select * from classifications where parent_id=? and name like ?  order by name", 
				new Object[]{parent_id, filter});
	}

	/**
	 * Updates the data in the database by data from the given {@link ClassificationsItemModel} object.
	 * If there is no record for this classification in the database the new record will be created.
	 * 
	 * @param item	classification to be updated
	 */
	public void updateItem(ClassificationsItemModel item) {
		if(item.getId()==0) {
			try {
				//If classification is new we need to retreive autogenerated key and put it to id field  
				Connection conn = getJdbcTemplate().getDataSource().getConnection();
				PreparedStatement st = conn.prepareStatement("insert into classifications (name, description, parent_id) values (?, ?, ?)");
				st.setString(1, item.getName());
				st.setString(2, item.getDescription());
				if(item.getParentModel()!=null)
					st.setInt(3, item.getParentModel().getId());
				else
					st.setInt(3, 0);
				st.execute();
				ResultSet ks = st.getGeneratedKeys();
				ks.next();
				item.setId(ks.getInt(1));
				ks.close();
				st.close();
				conn.close();
			} catch (SQLException e) {				
			}
		} else
			getJdbcTemplate().update("update classifications set name=?, description=? where id=?",
					new Object[]{item.getName(), item.getDescription(), item.getId()});
	}
	
	/**
	 * Deletes record from the database
	 * 
	 * @param id	id of classification to be deleted
	 */
	public void deleteItem(int id) throws Exception {
		int subc_count = getJdbcTemplate().queryForInt("select count(*) from classifications where parent_id="+id);
		int templ_count = getJdbcTemplate().queryForInt("select count(*) from templates_classifications where class_id="+id);
		if(templ_count>0 || subc_count>0)
			throw new Exception("Can not delete this category! There are " + subc_count + 
					" subcategory(ies) and " + templ_count + " template(s) that is linked to it!");

		getJdbcTemplate().update("delete from classifications where id=?", new Object[]{id});
	}
	
	@Override
	protected RowMapper getRowMapper() {
		if(mapper==null)
			mapper = new ItemRowMapper();
		return mapper;
	}

	@Override
	protected String getTableName() {
		return "classifications";
	}
}
