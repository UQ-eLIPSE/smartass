/* This file is part of SmartAss and contains the UpdatesDao class - the object-relational mapping class 
 * that maps the UpdatesItemModel to the database table(s).
 * 
 * Copyright (C) 2008 The University of Queensland
 * SmartAss is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation; either version 2, or
 * (at your option) any later version.
 * GNU program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with program;
 * see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */
package au.edu.uq.smartass.web.jdbc;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

//import org.apache.log4j.Logger;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.support.JdbcDaoSupport;

import au.edu.uq.smartass.web.UpdatesItemModel;

/**
 * The UpdatesDao class is the object-relational mapping class 
 * that maps the UpdatesItemModel to the datab
 */
public class UpdatesDao extends JdbcDaoSupport {
	ItemRowMapper mapper;
	AuthorsDao authorsDao;

	/**
	 * The ItemRowMapper class is the service class that maps data stored in the 
	 * relational database table(s) to the {@link UpdatesItemModel} object
	 */
	class ItemRowMapper implements RowMapper {
		public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
	    	UpdatesItemModel item = new UpdatesItemModel();

	    	item.setId(rs.getInt("id"));
	    	item.setComment(rs.getString("comment"));
	    	item.setUpdateDate(rs.getDate("update_date"));
	    	item.setTemplateId(rs.getInt("template_id"));
	    	
    		item.setAuthor(authorsDao.getItem(rs.getInt("author_id")));
	    	
	    	return item;
		}
	}
	
	protected List<UpdatesItemModel> select(String sql, Object[] params) {
		if(mapper==null)
			mapper = new ItemRowMapper();
		return getJdbcTemplate().query(sql, params, mapper);
	}
	
	/**
	 * Returns the list of {@link UpdatesItemModel} filtered by the template id
	 * 
	 * @param template_id	
	 * @return	the list of {@link UpdatesItemModel} filtered by the template id
	 */
	public List<UpdatesItemModel> select(int template_id) {
		return select("select * from updates where template_id=? order by update_date", new Integer[]{template_id});
	}
	
	/**
	 * Get the UpdatesItemModel object by its id
	 * 
	 * @param id	the object's id
	 * @return		the object
	 */
	public UpdatesItemModel getItem(int id) {
		List<UpdatesItemModel> items = select("select * from updates where id=?", new Integer[]{id});
		if(items.size()>0)
			return items.get(0);
		return null;
	}
	
	/**
	 * Updates the data in the database by the data from the given UpdatesItemModel object.
	 * If there is no record for this object in the database the new record will be created.
	 * 
	 * @param item	object to be updated
	 */
	public void updateItem(UpdatesItemModel item) {
//		Logger log = Logger.getLogger(getClass());
		if(item.getId()==0) {
			try {
//				log.debug("insert update");
				//If module is new we need to retrieve autogenerated key and put it to id field  
				Connection conn = getJdbcTemplate().getDataSource().getConnection();
				PreparedStatement st = conn.prepareStatement("insert into updates (update_date, author_id, comment, template_id) values (?, ?, ?, ?)");
				st.setDate(1, new Date(item.getUpdateDate().getTime()));
				st.setInt(2, item.getAuthor().getId());
				st.setString(3, item.getComment());
				st.setInt(4, item.getTemplateId());
				st.execute();
				ResultSet ks = st.getGeneratedKeys();
				ks.next();
				item.setId(ks.getInt(1));
				ks.close();
				st.close();
				conn.close();
			} catch (SQLException e) {				
//				log.debug("exception: "+e.getMessage());
			}
		} else {
//			log.debug("update update");
			getJdbcTemplate().update("insert into updates (update_date, author_id, comment, template_id, id) values (?, ?, ?, ?, ?)",
					new Object[]{item.getUpdateDate(), item.getAuthor().getId(), item.getComment(), item.getTemplateId(), item.getId()});
/*			getJdbcTemplate().update("update updates set update_date=?, author_id=?, comment=? where id=?",
					new Object[]{item.getUpdateDate(), item.getAuthor().getId(), item.getComment(), item.getId()});*/
		}
	}

	/**
	 * The setter for the authorsDao property
	 */
	public void setAuthorsDao(AuthorsDao authorsDao) {
		this.authorsDao = authorsDao;
	}
}
